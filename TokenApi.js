//
// Autogenerated by Thrift Compiler (0.19.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');


var ttypes = require('./PrismToken1.TokenApi_types');
//HELPER FUNCTIONS AND STRUCTURES

var TokenApi_ping_args = function(args) {
  this.sleepMs = null;
  this.echo = null;
  if (args) {
    if (args.sleepMs !== undefined && args.sleepMs !== null) {
      this.sleepMs = args.sleepMs;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sleepMs is unset!');
    }
    if (args.echo !== undefined && args.echo !== null) {
      this.echo = args.echo;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field echo is unset!');
    }
  }
};
TokenApi_ping_args.prototype = {};
TokenApi_ping_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.sleepMs = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.echo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenApi_ping_args.prototype.write = function(output) {
  output.writeStructBegin('TokenApi_ping_args');
  if (this.sleepMs !== null && this.sleepMs !== undefined) {
    output.writeFieldBegin('sleepMs', Thrift.Type.I32, 1);
    output.writeI32(this.sleepMs);
    output.writeFieldEnd();
  }
  if (this.echo !== null && this.echo !== undefined) {
    output.writeFieldBegin('echo', Thrift.Type.STRING, 2);
    output.writeString(this.echo);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenApi_ping_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ApiException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
TokenApi_ping_result.prototype = {};
TokenApi_ping_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ApiException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenApi_ping_result.prototype.write = function(output) {
  output.writeStructBegin('TokenApi_ping_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenApi_signInWithPassword_args = function(args) {
  this.messageId = null;
  this.realm = null;
  this.username = null;
  this.password = null;
  this.sessionOpts = null;
  if (args) {
    if (args.messageId !== undefined && args.messageId !== null) {
      this.messageId = args.messageId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field messageId is unset!');
    }
    if (args.realm !== undefined && args.realm !== null) {
      this.realm = args.realm;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field realm is unset!');
    }
    if (args.username !== undefined && args.username !== null) {
      this.username = args.username;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field username is unset!');
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field password is unset!');
    }
    if (args.sessionOpts !== undefined && args.sessionOpts !== null) {
      this.sessionOpts = new ttypes.SessionOptions(args.sessionOpts);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionOpts is unset!');
    }
  }
};
TokenApi_signInWithPassword_args.prototype = {};
TokenApi_signInWithPassword_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.messageId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.realm = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionOpts = new ttypes.SessionOptions();
        this.sessionOpts.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenApi_signInWithPassword_args.prototype.write = function(output) {
  output.writeStructBegin('TokenApi_signInWithPassword_args');
  if (this.messageId !== null && this.messageId !== undefined) {
    output.writeFieldBegin('messageId', Thrift.Type.STRING, 1);
    output.writeString(this.messageId);
    output.writeFieldEnd();
  }
  if (this.realm !== null && this.realm !== undefined) {
    output.writeFieldBegin('realm', Thrift.Type.STRING, 2);
    output.writeString(this.realm);
    output.writeFieldEnd();
  }
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 3);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 4);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.sessionOpts !== null && this.sessionOpts !== undefined) {
    output.writeFieldBegin('sessionOpts', Thrift.Type.STRUCT, 5);
    this.sessionOpts.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenApi_signInWithPassword_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ApiException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.SignInResult(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
TokenApi_signInWithPassword_result.prototype = {};
TokenApi_signInWithPassword_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SignInResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ApiException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenApi_signInWithPassword_result.prototype.write = function(output) {
  output.writeStructBegin('TokenApi_signInWithPassword_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenApi_getStatus_args = function(args) {
  this.messageId = null;
  this.accessToken = null;
  if (args) {
    if (args.messageId !== undefined && args.messageId !== null) {
      this.messageId = args.messageId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field messageId is unset!');
    }
    if (args.accessToken !== undefined && args.accessToken !== null) {
      this.accessToken = args.accessToken;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field accessToken is unset!');
    }
  }
};
TokenApi_getStatus_args.prototype = {};
TokenApi_getStatus_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.messageId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.accessToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenApi_getStatus_args.prototype.write = function(output) {
  output.writeStructBegin('TokenApi_getStatus_args');
  if (this.messageId !== null && this.messageId !== undefined) {
    output.writeFieldBegin('messageId', Thrift.Type.STRING, 1);
    output.writeString(this.messageId);
    output.writeFieldEnd();
  }
  if (this.accessToken !== null && this.accessToken !== undefined) {
    output.writeFieldBegin('accessToken', Thrift.Type.STRING, 2);
    output.writeString(this.accessToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenApi_getStatus_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ApiException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.NodeStatus]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
TokenApi_getStatus_result.prototype = {};
TokenApi_getStatus_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp313 = input.readListBegin();
        var _size12 = _rtmp313.size || 0;
        for (var _i14 = 0; _i14 < _size12; ++_i14) {
          var elem15 = null;
          elem15 = new ttypes.NodeStatus();
          elem15.read(input);
          this.success.push(elem15);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ApiException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenApi_getStatus_result.prototype.write = function(output) {
  output.writeStructBegin('TokenApi_getStatus_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter16 in this.success) {
      if (this.success.hasOwnProperty(iter16)) {
        iter16 = this.success[iter16];
        iter16.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenApi_parseIdRecord_args = function(args) {
  this.messageId = null;
  this.accessToken = null;
  this.idRecord = null;
  if (args) {
    if (args.messageId !== undefined && args.messageId !== null) {
      this.messageId = args.messageId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field messageId is unset!');
    }
    if (args.accessToken !== undefined && args.accessToken !== null) {
      this.accessToken = args.accessToken;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field accessToken is unset!');
    }
    if (args.idRecord !== undefined && args.idRecord !== null) {
      this.idRecord = args.idRecord;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field idRecord is unset!');
    }
  }
};
TokenApi_parseIdRecord_args.prototype = {};
TokenApi_parseIdRecord_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.messageId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.accessToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.idRecord = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenApi_parseIdRecord_args.prototype.write = function(output) {
  output.writeStructBegin('TokenApi_parseIdRecord_args');
  if (this.messageId !== null && this.messageId !== undefined) {
    output.writeFieldBegin('messageId', Thrift.Type.STRING, 1);
    output.writeString(this.messageId);
    output.writeFieldEnd();
  }
  if (this.accessToken !== null && this.accessToken !== undefined) {
    output.writeFieldBegin('accessToken', Thrift.Type.STRING, 2);
    output.writeString(this.accessToken);
    output.writeFieldEnd();
  }
  if (this.idRecord !== null && this.idRecord !== undefined) {
    output.writeFieldBegin('idRecord', Thrift.Type.STRING, 3);
    output.writeString(this.idRecord);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenApi_parseIdRecord_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ApiException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.MeterConfigIn(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
TokenApi_parseIdRecord_result.prototype = {};
TokenApi_parseIdRecord_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.MeterConfigIn();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ApiException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenApi_parseIdRecord_result.prototype.write = function(output) {
  output.writeStructBegin('TokenApi_parseIdRecord_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenApi_loadTransactionLicense_args = function(args) {
  this.messageId = null;
  this.accessToken = null;
  this.licenseText = null;
  if (args) {
    if (args.messageId !== undefined && args.messageId !== null) {
      this.messageId = args.messageId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field messageId is unset!');
    }
    if (args.accessToken !== undefined && args.accessToken !== null) {
      this.accessToken = args.accessToken;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field accessToken is unset!');
    }
    if (args.licenseText !== undefined && args.licenseText !== null) {
      this.licenseText = args.licenseText;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field licenseText is unset!');
    }
  }
};
TokenApi_loadTransactionLicense_args.prototype = {};
TokenApi_loadTransactionLicense_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.messageId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.accessToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.licenseText = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenApi_loadTransactionLicense_args.prototype.write = function(output) {
  output.writeStructBegin('TokenApi_loadTransactionLicense_args');
  if (this.messageId !== null && this.messageId !== undefined) {
    output.writeFieldBegin('messageId', Thrift.Type.STRING, 1);
    output.writeString(this.messageId);
    output.writeFieldEnd();
  }
  if (this.accessToken !== null && this.accessToken !== undefined) {
    output.writeFieldBegin('accessToken', Thrift.Type.STRING, 2);
    output.writeString(this.accessToken);
    output.writeFieldEnd();
  }
  if (this.licenseText !== null && this.licenseText !== undefined) {
    output.writeFieldBegin('licenseText', Thrift.Type.STRING, 3);
    output.writeString(this.licenseText);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenApi_loadTransactionLicense_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ApiException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
TokenApi_loadTransactionLicense_result.prototype = {};
TokenApi_loadTransactionLicense_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ApiException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenApi_loadTransactionLicense_result.prototype.write = function(output) {
  output.writeStructBegin('TokenApi_loadTransactionLicense_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenApi_issueCreditToken_args = function(args) {
  this.messageId = null;
  this.accessToken = null;
  this.meterConfig = null;
  this.subclass = null;
  this.transferAmount = null;
  this.tokenTime = null;
  this.flags = null;
  if (args) {
    if (args.messageId !== undefined && args.messageId !== null) {
      this.messageId = args.messageId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field messageId is unset!');
    }
    if (args.accessToken !== undefined && args.accessToken !== null) {
      this.accessToken = args.accessToken;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field accessToken is unset!');
    }
    if (args.meterConfig !== undefined && args.meterConfig !== null) {
      this.meterConfig = new ttypes.MeterConfigIn(args.meterConfig);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field meterConfig is unset!');
    }
    if (args.subclass !== undefined && args.subclass !== null) {
      this.subclass = args.subclass;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field subclass is unset!');
    }
    if (args.transferAmount !== undefined && args.transferAmount !== null) {
      this.transferAmount = args.transferAmount;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field transferAmount is unset!');
    }
    if (args.tokenTime !== undefined && args.tokenTime !== null) {
      this.tokenTime = args.tokenTime;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tokenTime is unset!');
    }
    if (args.flags !== undefined && args.flags !== null) {
      this.flags = args.flags;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field flags is unset!');
    }
  }
};
TokenApi_issueCreditToken_args.prototype = {};
TokenApi_issueCreditToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.messageId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.accessToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.meterConfig = new ttypes.MeterConfigIn();
        this.meterConfig.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I16) {
        this.subclass = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.DOUBLE) {
        this.transferAmount = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.tokenTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.flags = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenApi_issueCreditToken_args.prototype.write = function(output) {
  output.writeStructBegin('TokenApi_issueCreditToken_args');
  if (this.messageId !== null && this.messageId !== undefined) {
    output.writeFieldBegin('messageId', Thrift.Type.STRING, 1);
    output.writeString(this.messageId);
    output.writeFieldEnd();
  }
  if (this.accessToken !== null && this.accessToken !== undefined) {
    output.writeFieldBegin('accessToken', Thrift.Type.STRING, 2);
    output.writeString(this.accessToken);
    output.writeFieldEnd();
  }
  if (this.meterConfig !== null && this.meterConfig !== undefined) {
    output.writeFieldBegin('meterConfig', Thrift.Type.STRUCT, 3);
    this.meterConfig.write(output);
    output.writeFieldEnd();
  }
  if (this.subclass !== null && this.subclass !== undefined) {
    output.writeFieldBegin('subclass', Thrift.Type.I16, 4);
    output.writeI16(this.subclass);
    output.writeFieldEnd();
  }
  if (this.transferAmount !== null && this.transferAmount !== undefined) {
    output.writeFieldBegin('transferAmount', Thrift.Type.DOUBLE, 5);
    output.writeDouble(this.transferAmount);
    output.writeFieldEnd();
  }
  if (this.tokenTime !== null && this.tokenTime !== undefined) {
    output.writeFieldBegin('tokenTime', Thrift.Type.I64, 6);
    output.writeI64(this.tokenTime);
    output.writeFieldEnd();
  }
  if (this.flags !== null && this.flags !== undefined) {
    output.writeFieldBegin('flags', Thrift.Type.I64, 7);
    output.writeI64(this.flags);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenApi_issueCreditToken_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ApiException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Token]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
TokenApi_issueCreditToken_result.prototype = {};
TokenApi_issueCreditToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp318 = input.readListBegin();
        var _size17 = _rtmp318.size || 0;
        for (var _i19 = 0; _i19 < _size17; ++_i19) {
          var elem20 = null;
          elem20 = new ttypes.Token();
          elem20.read(input);
          this.success.push(elem20);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ApiException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenApi_issueCreditToken_result.prototype.write = function(output) {
  output.writeStructBegin('TokenApi_issueCreditToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter21 in this.success) {
      if (this.success.hasOwnProperty(iter21)) {
        iter21 = this.success[iter21];
        iter21.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenApi_issueMeterTestToken_args = function(args) {
  this.messageId = null;
  this.accessToken = null;
  this.subclass = null;
  this.control = null;
  this.mfrcode = null;
  if (args) {
    if (args.messageId !== undefined && args.messageId !== null) {
      this.messageId = args.messageId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field messageId is unset!');
    }
    if (args.accessToken !== undefined && args.accessToken !== null) {
      this.accessToken = args.accessToken;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field accessToken is unset!');
    }
    if (args.subclass !== undefined && args.subclass !== null) {
      this.subclass = args.subclass;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field subclass is unset!');
    }
    if (args.control !== undefined && args.control !== null) {
      this.control = args.control;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field control is unset!');
    }
    if (args.mfrcode !== undefined && args.mfrcode !== null) {
      this.mfrcode = args.mfrcode;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field mfrcode is unset!');
    }
  }
};
TokenApi_issueMeterTestToken_args.prototype = {};
TokenApi_issueMeterTestToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.messageId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.accessToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.subclass = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.control = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I16) {
        this.mfrcode = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenApi_issueMeterTestToken_args.prototype.write = function(output) {
  output.writeStructBegin('TokenApi_issueMeterTestToken_args');
  if (this.messageId !== null && this.messageId !== undefined) {
    output.writeFieldBegin('messageId', Thrift.Type.STRING, 1);
    output.writeString(this.messageId);
    output.writeFieldEnd();
  }
  if (this.accessToken !== null && this.accessToken !== undefined) {
    output.writeFieldBegin('accessToken', Thrift.Type.STRING, 2);
    output.writeString(this.accessToken);
    output.writeFieldEnd();
  }
  if (this.subclass !== null && this.subclass !== undefined) {
    output.writeFieldBegin('subclass', Thrift.Type.I16, 3);
    output.writeI16(this.subclass);
    output.writeFieldEnd();
  }
  if (this.control !== null && this.control !== undefined) {
    output.writeFieldBegin('control', Thrift.Type.I64, 4);
    output.writeI64(this.control);
    output.writeFieldEnd();
  }
  if (this.mfrcode !== null && this.mfrcode !== undefined) {
    output.writeFieldBegin('mfrcode', Thrift.Type.I16, 5);
    output.writeI16(this.mfrcode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenApi_issueMeterTestToken_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ApiException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.MeterTestToken(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
TokenApi_issueMeterTestToken_result.prototype = {};
TokenApi_issueMeterTestToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.MeterTestToken();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ApiException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenApi_issueMeterTestToken_result.prototype.write = function(output) {
  output.writeStructBegin('TokenApi_issueMeterTestToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenApi_issueMseToken_args = function(args) {
  this.messageId = null;
  this.accessToken = null;
  this.meterConfig = null;
  this.subclass = null;
  this.transferAmount = null;
  this.tokenTime = null;
  this.flags = null;
  if (args) {
    if (args.messageId !== undefined && args.messageId !== null) {
      this.messageId = args.messageId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field messageId is unset!');
    }
    if (args.accessToken !== undefined && args.accessToken !== null) {
      this.accessToken = args.accessToken;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field accessToken is unset!');
    }
    if (args.meterConfig !== undefined && args.meterConfig !== null) {
      this.meterConfig = new ttypes.MeterConfigIn(args.meterConfig);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field meterConfig is unset!');
    }
    if (args.subclass !== undefined && args.subclass !== null) {
      this.subclass = args.subclass;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field subclass is unset!');
    }
    if (args.transferAmount !== undefined && args.transferAmount !== null) {
      this.transferAmount = args.transferAmount;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field transferAmount is unset!');
    }
    if (args.tokenTime !== undefined && args.tokenTime !== null) {
      this.tokenTime = args.tokenTime;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tokenTime is unset!');
    }
    if (args.flags !== undefined && args.flags !== null) {
      this.flags = args.flags;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field flags is unset!');
    }
  }
};
TokenApi_issueMseToken_args.prototype = {};
TokenApi_issueMseToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.messageId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.accessToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.meterConfig = new ttypes.MeterConfigIn();
        this.meterConfig.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I16) {
        this.subclass = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.DOUBLE) {
        this.transferAmount = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.tokenTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.flags = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenApi_issueMseToken_args.prototype.write = function(output) {
  output.writeStructBegin('TokenApi_issueMseToken_args');
  if (this.messageId !== null && this.messageId !== undefined) {
    output.writeFieldBegin('messageId', Thrift.Type.STRING, 1);
    output.writeString(this.messageId);
    output.writeFieldEnd();
  }
  if (this.accessToken !== null && this.accessToken !== undefined) {
    output.writeFieldBegin('accessToken', Thrift.Type.STRING, 2);
    output.writeString(this.accessToken);
    output.writeFieldEnd();
  }
  if (this.meterConfig !== null && this.meterConfig !== undefined) {
    output.writeFieldBegin('meterConfig', Thrift.Type.STRUCT, 3);
    this.meterConfig.write(output);
    output.writeFieldEnd();
  }
  if (this.subclass !== null && this.subclass !== undefined) {
    output.writeFieldBegin('subclass', Thrift.Type.I16, 4);
    output.writeI16(this.subclass);
    output.writeFieldEnd();
  }
  if (this.transferAmount !== null && this.transferAmount !== undefined) {
    output.writeFieldBegin('transferAmount', Thrift.Type.DOUBLE, 5);
    output.writeDouble(this.transferAmount);
    output.writeFieldEnd();
  }
  if (this.tokenTime !== null && this.tokenTime !== undefined) {
    output.writeFieldBegin('tokenTime', Thrift.Type.I64, 6);
    output.writeI64(this.tokenTime);
    output.writeFieldEnd();
  }
  if (this.flags !== null && this.flags !== undefined) {
    output.writeFieldBegin('flags', Thrift.Type.I64, 7);
    output.writeI64(this.flags);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenApi_issueMseToken_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ApiException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Token]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
TokenApi_issueMseToken_result.prototype = {};
TokenApi_issueMseToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp323 = input.readListBegin();
        var _size22 = _rtmp323.size || 0;
        for (var _i24 = 0; _i24 < _size22; ++_i24) {
          var elem25 = null;
          elem25 = new ttypes.Token();
          elem25.read(input);
          this.success.push(elem25);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ApiException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenApi_issueMseToken_result.prototype.write = function(output) {
  output.writeStructBegin('TokenApi_issueMseToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter26 in this.success) {
      if (this.success.hasOwnProperty(iter26)) {
        iter26 = this.success[iter26];
        iter26.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenApi_issueSetControlToken_args = function(args) {
  this.messageId = null;
  this.accessToken = null;
  this.meterConfig = null;
  this.isFlag = null;
  this.index = null;
  this.value = null;
  this.tokenTime = null;
  this.flags = null;
  if (args) {
    if (args.messageId !== undefined && args.messageId !== null) {
      this.messageId = args.messageId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field messageId is unset!');
    }
    if (args.accessToken !== undefined && args.accessToken !== null) {
      this.accessToken = args.accessToken;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field accessToken is unset!');
    }
    if (args.meterConfig !== undefined && args.meterConfig !== null) {
      this.meterConfig = new ttypes.MeterConfigIn(args.meterConfig);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field meterConfig is unset!');
    }
    if (args.isFlag !== undefined && args.isFlag !== null) {
      this.isFlag = args.isFlag;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field isFlag is unset!');
    }
    if (args.index !== undefined && args.index !== null) {
      this.index = args.index;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field index is unset!');
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field value is unset!');
    }
    if (args.tokenTime !== undefined && args.tokenTime !== null) {
      this.tokenTime = args.tokenTime;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tokenTime is unset!');
    }
    if (args.flags !== undefined && args.flags !== null) {
      this.flags = args.flags;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field flags is unset!');
    }
  }
};
TokenApi_issueSetControlToken_args.prototype = {};
TokenApi_issueSetControlToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.messageId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.accessToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.meterConfig = new ttypes.MeterConfigIn();
        this.meterConfig.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.isFlag = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I16) {
        this.index = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I16) {
        this.value = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.tokenTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.flags = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenApi_issueSetControlToken_args.prototype.write = function(output) {
  output.writeStructBegin('TokenApi_issueSetControlToken_args');
  if (this.messageId !== null && this.messageId !== undefined) {
    output.writeFieldBegin('messageId', Thrift.Type.STRING, 1);
    output.writeString(this.messageId);
    output.writeFieldEnd();
  }
  if (this.accessToken !== null && this.accessToken !== undefined) {
    output.writeFieldBegin('accessToken', Thrift.Type.STRING, 2);
    output.writeString(this.accessToken);
    output.writeFieldEnd();
  }
  if (this.meterConfig !== null && this.meterConfig !== undefined) {
    output.writeFieldBegin('meterConfig', Thrift.Type.STRUCT, 3);
    this.meterConfig.write(output);
    output.writeFieldEnd();
  }
  if (this.isFlag !== null && this.isFlag !== undefined) {
    output.writeFieldBegin('isFlag', Thrift.Type.BOOL, 4);
    output.writeBool(this.isFlag);
    output.writeFieldEnd();
  }
  if (this.index !== null && this.index !== undefined) {
    output.writeFieldBegin('index', Thrift.Type.I16, 5);
    output.writeI16(this.index);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.I16, 6);
    output.writeI16(this.value);
    output.writeFieldEnd();
  }
  if (this.tokenTime !== null && this.tokenTime !== undefined) {
    output.writeFieldBegin('tokenTime', Thrift.Type.I64, 7);
    output.writeI64(this.tokenTime);
    output.writeFieldEnd();
  }
  if (this.flags !== null && this.flags !== undefined) {
    output.writeFieldBegin('flags', Thrift.Type.I64, 8);
    output.writeI64(this.flags);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenApi_issueSetControlToken_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ApiException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Token]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
TokenApi_issueSetControlToken_result.prototype = {};
TokenApi_issueSetControlToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp328 = input.readListBegin();
        var _size27 = _rtmp328.size || 0;
        for (var _i29 = 0; _i29 < _size27; ++_i29) {
          var elem30 = null;
          elem30 = new ttypes.Token();
          elem30.read(input);
          this.success.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ApiException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenApi_issueSetControlToken_result.prototype.write = function(output) {
  output.writeStructBegin('TokenApi_issueSetControlToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter31 in this.success) {
      if (this.success.hasOwnProperty(iter31)) {
        iter31 = this.success[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenApi_issueKeyChangeTokens_args = function(args) {
  this.messageId = null;
  this.accessToken = null;
  this.meterConfig = null;
  this.newConfig = null;
  if (args) {
    if (args.messageId !== undefined && args.messageId !== null) {
      this.messageId = args.messageId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field messageId is unset!');
    }
    if (args.accessToken !== undefined && args.accessToken !== null) {
      this.accessToken = args.accessToken;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field accessToken is unset!');
    }
    if (args.meterConfig !== undefined && args.meterConfig !== null) {
      this.meterConfig = new ttypes.MeterConfigIn(args.meterConfig);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field meterConfig is unset!');
    }
    if (args.newConfig !== undefined && args.newConfig !== null) {
      this.newConfig = new ttypes.MeterConfigAmendment(args.newConfig);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field newConfig is unset!');
    }
  }
};
TokenApi_issueKeyChangeTokens_args.prototype = {};
TokenApi_issueKeyChangeTokens_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.messageId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.accessToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.meterConfig = new ttypes.MeterConfigIn();
        this.meterConfig.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.newConfig = new ttypes.MeterConfigAmendment();
        this.newConfig.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenApi_issueKeyChangeTokens_args.prototype.write = function(output) {
  output.writeStructBegin('TokenApi_issueKeyChangeTokens_args');
  if (this.messageId !== null && this.messageId !== undefined) {
    output.writeFieldBegin('messageId', Thrift.Type.STRING, 1);
    output.writeString(this.messageId);
    output.writeFieldEnd();
  }
  if (this.accessToken !== null && this.accessToken !== undefined) {
    output.writeFieldBegin('accessToken', Thrift.Type.STRING, 2);
    output.writeString(this.accessToken);
    output.writeFieldEnd();
  }
  if (this.meterConfig !== null && this.meterConfig !== undefined) {
    output.writeFieldBegin('meterConfig', Thrift.Type.STRUCT, 3);
    this.meterConfig.write(output);
    output.writeFieldEnd();
  }
  if (this.newConfig !== null && this.newConfig !== undefined) {
    output.writeFieldBegin('newConfig', Thrift.Type.STRUCT, 4);
    this.newConfig.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenApi_issueKeyChangeTokens_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ApiException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Token]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
TokenApi_issueKeyChangeTokens_result.prototype = {};
TokenApi_issueKeyChangeTokens_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp333 = input.readListBegin();
        var _size32 = _rtmp333.size || 0;
        for (var _i34 = 0; _i34 < _size32; ++_i34) {
          var elem35 = null;
          elem35 = new ttypes.Token();
          elem35.read(input);
          this.success.push(elem35);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ApiException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenApi_issueKeyChangeTokens_result.prototype.write = function(output) {
  output.writeStructBegin('TokenApi_issueKeyChangeTokens_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter36 in this.success) {
      if (this.success.hasOwnProperty(iter36)) {
        iter36 = this.success[iter36];
        iter36.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenApi_verifyToken_args = function(args) {
  this.messageId = null;
  this.accessToken = null;
  this.meterConfig = null;
  this.tokenDec = null;
  if (args) {
    if (args.messageId !== undefined && args.messageId !== null) {
      this.messageId = args.messageId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field messageId is unset!');
    }
    if (args.accessToken !== undefined && args.accessToken !== null) {
      this.accessToken = args.accessToken;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field accessToken is unset!');
    }
    if (args.meterConfig !== undefined && args.meterConfig !== null) {
      this.meterConfig = new ttypes.MeterConfigIn(args.meterConfig);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field meterConfig is unset!');
    }
    if (args.tokenDec !== undefined && args.tokenDec !== null) {
      this.tokenDec = args.tokenDec;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tokenDec is unset!');
    }
  }
};
TokenApi_verifyToken_args.prototype = {};
TokenApi_verifyToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.messageId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.accessToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.meterConfig = new ttypes.MeterConfigIn();
        this.meterConfig.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.tokenDec = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenApi_verifyToken_args.prototype.write = function(output) {
  output.writeStructBegin('TokenApi_verifyToken_args');
  if (this.messageId !== null && this.messageId !== undefined) {
    output.writeFieldBegin('messageId', Thrift.Type.STRING, 1);
    output.writeString(this.messageId);
    output.writeFieldEnd();
  }
  if (this.accessToken !== null && this.accessToken !== undefined) {
    output.writeFieldBegin('accessToken', Thrift.Type.STRING, 2);
    output.writeString(this.accessToken);
    output.writeFieldEnd();
  }
  if (this.meterConfig !== null && this.meterConfig !== undefined) {
    output.writeFieldBegin('meterConfig', Thrift.Type.STRUCT, 3);
    this.meterConfig.write(output);
    output.writeFieldEnd();
  }
  if (this.tokenDec !== null && this.tokenDec !== undefined) {
    output.writeFieldBegin('tokenDec', Thrift.Type.STRING, 4);
    output.writeString(this.tokenDec);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenApi_verifyToken_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ApiException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.VerifyResult(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
TokenApi_verifyToken_result.prototype = {};
TokenApi_verifyToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.VerifyResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ApiException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenApi_verifyToken_result.prototype.write = function(output) {
  output.writeStructBegin('TokenApi_verifyToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenApi_issueDitkChangeTokens_args = function(args) {
  this.messageId = null;
  this.accessToken = null;
  this.meterConfig = null;
  if (args) {
    if (args.messageId !== undefined && args.messageId !== null) {
      this.messageId = args.messageId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field messageId is unset!');
    }
    if (args.accessToken !== undefined && args.accessToken !== null) {
      this.accessToken = args.accessToken;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field accessToken is unset!');
    }
    if (args.meterConfig !== undefined && args.meterConfig !== null) {
      this.meterConfig = new ttypes.MeterConfigIn(args.meterConfig);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field meterConfig is unset!');
    }
  }
};
TokenApi_issueDitkChangeTokens_args.prototype = {};
TokenApi_issueDitkChangeTokens_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.messageId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.accessToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.meterConfig = new ttypes.MeterConfigIn();
        this.meterConfig.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenApi_issueDitkChangeTokens_args.prototype.write = function(output) {
  output.writeStructBegin('TokenApi_issueDitkChangeTokens_args');
  if (this.messageId !== null && this.messageId !== undefined) {
    output.writeFieldBegin('messageId', Thrift.Type.STRING, 1);
    output.writeString(this.messageId);
    output.writeFieldEnd();
  }
  if (this.accessToken !== null && this.accessToken !== undefined) {
    output.writeFieldBegin('accessToken', Thrift.Type.STRING, 2);
    output.writeString(this.accessToken);
    output.writeFieldEnd();
  }
  if (this.meterConfig !== null && this.meterConfig !== undefined) {
    output.writeFieldBegin('meterConfig', Thrift.Type.STRUCT, 3);
    this.meterConfig.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenApi_issueDitkChangeTokens_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ApiException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Token]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
TokenApi_issueDitkChangeTokens_result.prototype = {};
TokenApi_issueDitkChangeTokens_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp338 = input.readListBegin();
        var _size37 = _rtmp338.size || 0;
        for (var _i39 = 0; _i39 < _size37; ++_i39) {
          var elem40 = null;
          elem40 = new ttypes.Token();
          elem40.read(input);
          this.success.push(elem40);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ApiException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenApi_issueDitkChangeTokens_result.prototype.write = function(output) {
  output.writeStructBegin('TokenApi_issueDitkChangeTokens_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter41 in this.success) {
      if (this.success.hasOwnProperty(iter41)) {
        iter41 = this.success[iter41];
        iter41.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenApi_fetchTokenResult_args = function(args) {
  this.messageId = null;
  this.accessToken = null;
  this.reqMessageId = null;
  if (args) {
    if (args.messageId !== undefined && args.messageId !== null) {
      this.messageId = args.messageId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field messageId is unset!');
    }
    if (args.accessToken !== undefined && args.accessToken !== null) {
      this.accessToken = args.accessToken;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field accessToken is unset!');
    }
    if (args.reqMessageId !== undefined && args.reqMessageId !== null) {
      this.reqMessageId = args.reqMessageId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field reqMessageId is unset!');
    }
  }
};
TokenApi_fetchTokenResult_args.prototype = {};
TokenApi_fetchTokenResult_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.messageId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.accessToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.reqMessageId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenApi_fetchTokenResult_args.prototype.write = function(output) {
  output.writeStructBegin('TokenApi_fetchTokenResult_args');
  if (this.messageId !== null && this.messageId !== undefined) {
    output.writeFieldBegin('messageId', Thrift.Type.STRING, 1);
    output.writeString(this.messageId);
    output.writeFieldEnd();
  }
  if (this.accessToken !== null && this.accessToken !== undefined) {
    output.writeFieldBegin('accessToken', Thrift.Type.STRING, 2);
    output.writeString(this.accessToken);
    output.writeFieldEnd();
  }
  if (this.reqMessageId !== null && this.reqMessageId !== undefined) {
    output.writeFieldBegin('reqMessageId', Thrift.Type.STRING, 3);
    output.writeString(this.reqMessageId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenApi_fetchTokenResult_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ApiException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Token]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
TokenApi_fetchTokenResult_result.prototype = {};
TokenApi_fetchTokenResult_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp343 = input.readListBegin();
        var _size42 = _rtmp343.size || 0;
        for (var _i44 = 0; _i44 < _size42; ++_i44) {
          var elem45 = null;
          elem45 = new ttypes.Token();
          elem45.read(input);
          this.success.push(elem45);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ApiException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenApi_fetchTokenResult_result.prototype.write = function(output) {
  output.writeStructBegin('TokenApi_fetchTokenResult_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter46 in this.success) {
      if (this.success.hasOwnProperty(iter46)) {
        iter46 = this.success[iter46];
        iter46.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenApi_ctsResetTidList_args = function(args) {
  this.messageId = null;
  this.accessToken = null;
  this.panPattern = null;
  if (args) {
    if (args.messageId !== undefined && args.messageId !== null) {
      this.messageId = args.messageId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field messageId is unset!');
    }
    if (args.accessToken !== undefined && args.accessToken !== null) {
      this.accessToken = args.accessToken;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field accessToken is unset!');
    }
    if (args.panPattern !== undefined && args.panPattern !== null) {
      this.panPattern = args.panPattern;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field panPattern is unset!');
    }
  }
};
TokenApi_ctsResetTidList_args.prototype = {};
TokenApi_ctsResetTidList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.messageId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.accessToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.panPattern = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenApi_ctsResetTidList_args.prototype.write = function(output) {
  output.writeStructBegin('TokenApi_ctsResetTidList_args');
  if (this.messageId !== null && this.messageId !== undefined) {
    output.writeFieldBegin('messageId', Thrift.Type.STRING, 1);
    output.writeString(this.messageId);
    output.writeFieldEnd();
  }
  if (this.accessToken !== null && this.accessToken !== undefined) {
    output.writeFieldBegin('accessToken', Thrift.Type.STRING, 2);
    output.writeString(this.accessToken);
    output.writeFieldEnd();
  }
  if (this.panPattern !== null && this.panPattern !== undefined) {
    output.writeFieldBegin('panPattern', Thrift.Type.STRING, 3);
    output.writeString(this.panPattern);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenApi_ctsResetTidList_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.ApiException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
TokenApi_ctsResetTidList_result.prototype = {};
TokenApi_ctsResetTidList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp348 = input.readListBegin();
        var _size47 = _rtmp348.size || 0;
        for (var _i49 = 0; _i49 < _size47; ++_i49) {
          var elem50 = null;
          elem50 = input.readString();
          this.success.push(elem50);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.ApiException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenApi_ctsResetTidList_result.prototype.write = function(output) {
  output.writeStructBegin('TokenApi_ctsResetTidList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter51 in this.success) {
      if (this.success.hasOwnProperty(iter51)) {
        iter51 = this.success[iter51];
        output.writeString(iter51);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenApiClient = exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
TokenApiClient.prototype = {};
TokenApiClient.prototype.seqid = function() { return this._seqid; };
TokenApiClient.prototype.new_seqid = function() { return this._seqid += 1; };

TokenApiClient.prototype.ping = function(sleepMs, echo, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_ping(sleepMs, echo);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_ping(sleepMs, echo);
  }
};

TokenApiClient.prototype.send_ping = function(sleepMs, echo) {
  var output = new this.pClass(this.output);
  var params = {
    sleepMs: sleepMs,
    echo: echo
  };
  var args = new TokenApi_ping_args(params);
  try {
    output.writeMessageBegin('ping', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

TokenApiClient.prototype.recv_ping = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TokenApi_ping_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('ping failed: unknown result');
};

TokenApiClient.prototype.signInWithPassword = function(messageId, realm, username, password, sessionOpts, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_signInWithPassword(messageId, realm, username, password, sessionOpts);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_signInWithPassword(messageId, realm, username, password, sessionOpts);
  }
};

TokenApiClient.prototype.send_signInWithPassword = function(messageId, realm, username, password, sessionOpts) {
  var output = new this.pClass(this.output);
  var params = {
    messageId: messageId,
    realm: realm,
    username: username,
    password: password,
    sessionOpts: sessionOpts
  };
  var args = new TokenApi_signInWithPassword_args(params);
  try {
    output.writeMessageBegin('signInWithPassword', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

TokenApiClient.prototype.recv_signInWithPassword = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TokenApi_signInWithPassword_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('signInWithPassword failed: unknown result');
};

TokenApiClient.prototype.getStatus = function(messageId, accessToken, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getStatus(messageId, accessToken);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getStatus(messageId, accessToken);
  }
};

TokenApiClient.prototype.send_getStatus = function(messageId, accessToken) {
  var output = new this.pClass(this.output);
  var params = {
    messageId: messageId,
    accessToken: accessToken
  };
  var args = new TokenApi_getStatus_args(params);
  try {
    output.writeMessageBegin('getStatus', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

TokenApiClient.prototype.recv_getStatus = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TokenApi_getStatus_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getStatus failed: unknown result');
};

TokenApiClient.prototype.parseIdRecord = function(messageId, accessToken, idRecord, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_parseIdRecord(messageId, accessToken, idRecord);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_parseIdRecord(messageId, accessToken, idRecord);
  }
};

TokenApiClient.prototype.send_parseIdRecord = function(messageId, accessToken, idRecord) {
  var output = new this.pClass(this.output);
  var params = {
    messageId: messageId,
    accessToken: accessToken,
    idRecord: idRecord
  };
  var args = new TokenApi_parseIdRecord_args(params);
  try {
    output.writeMessageBegin('parseIdRecord', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

TokenApiClient.prototype.recv_parseIdRecord = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TokenApi_parseIdRecord_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('parseIdRecord failed: unknown result');
};

TokenApiClient.prototype.loadTransactionLicense = function(messageId, accessToken, licenseText, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadTransactionLicense(messageId, accessToken, licenseText);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadTransactionLicense(messageId, accessToken, licenseText);
  }
};

TokenApiClient.prototype.send_loadTransactionLicense = function(messageId, accessToken, licenseText) {
  var output = new this.pClass(this.output);
  var params = {
    messageId: messageId,
    accessToken: accessToken,
    licenseText: licenseText
  };
  var args = new TokenApi_loadTransactionLicense_args(params);
  try {
    output.writeMessageBegin('loadTransactionLicense', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

TokenApiClient.prototype.recv_loadTransactionLicense = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TokenApi_loadTransactionLicense_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loadTransactionLicense failed: unknown result');
};

TokenApiClient.prototype.issueCreditToken = function(messageId, accessToken, meterConfig, subclass, transferAmount, tokenTime, flags, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_issueCreditToken(messageId, accessToken, meterConfig, subclass, transferAmount, tokenTime, flags);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_issueCreditToken(messageId, accessToken, meterConfig, subclass, transferAmount, tokenTime, flags);
  }
};

TokenApiClient.prototype.send_issueCreditToken = function(messageId, accessToken, meterConfig, subclass, transferAmount, tokenTime, flags) {
  var output = new this.pClass(this.output);
  var params = {
    messageId: messageId,
    accessToken: accessToken,
    meterConfig: meterConfig,
    subclass: subclass,
    transferAmount: transferAmount,
    tokenTime: tokenTime,
    flags: flags
  };
  var args = new TokenApi_issueCreditToken_args(params);
  try {
    output.writeMessageBegin('issueCreditToken', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

TokenApiClient.prototype.recv_issueCreditToken = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TokenApi_issueCreditToken_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('issueCreditToken failed: unknown result');
};

TokenApiClient.prototype.issueMeterTestToken = function(messageId, accessToken, subclass, control, mfrcode, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_issueMeterTestToken(messageId, accessToken, subclass, control, mfrcode);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_issueMeterTestToken(messageId, accessToken, subclass, control, mfrcode);
  }
};

TokenApiClient.prototype.send_issueMeterTestToken = function(messageId, accessToken, subclass, control, mfrcode) {
  var output = new this.pClass(this.output);
  var params = {
    messageId: messageId,
    accessToken: accessToken,
    subclass: subclass,
    control: control,
    mfrcode: mfrcode
  };
  var args = new TokenApi_issueMeterTestToken_args(params);
  try {
    output.writeMessageBegin('issueMeterTestToken', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

TokenApiClient.prototype.recv_issueMeterTestToken = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TokenApi_issueMeterTestToken_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('issueMeterTestToken failed: unknown result');
};

TokenApiClient.prototype.issueMseToken = function(messageId, accessToken, meterConfig, subclass, transferAmount, tokenTime, flags, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_issueMseToken(messageId, accessToken, meterConfig, subclass, transferAmount, tokenTime, flags);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_issueMseToken(messageId, accessToken, meterConfig, subclass, transferAmount, tokenTime, flags);
  }
};

TokenApiClient.prototype.send_issueMseToken = function(messageId, accessToken, meterConfig, subclass, transferAmount, tokenTime, flags) {
  var output = new this.pClass(this.output);
  var params = {
    messageId: messageId,
    accessToken: accessToken,
    meterConfig: meterConfig,
    subclass: subclass,
    transferAmount: transferAmount,
    tokenTime: tokenTime,
    flags: flags
  };
  var args = new TokenApi_issueMseToken_args(params);
  try {
    output.writeMessageBegin('issueMseToken', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

TokenApiClient.prototype.recv_issueMseToken = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TokenApi_issueMseToken_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('issueMseToken failed: unknown result');
};

TokenApiClient.prototype.issueSetControlToken = function(messageId, accessToken, meterConfig, isFlag, index, value, tokenTime, flags, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_issueSetControlToken(messageId, accessToken, meterConfig, isFlag, index, value, tokenTime, flags);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_issueSetControlToken(messageId, accessToken, meterConfig, isFlag, index, value, tokenTime, flags);
  }
};

TokenApiClient.prototype.send_issueSetControlToken = function(messageId, accessToken, meterConfig, isFlag, index, value, tokenTime, flags) {
  var output = new this.pClass(this.output);
  var params = {
    messageId: messageId,
    accessToken: accessToken,
    meterConfig: meterConfig,
    isFlag: isFlag,
    index: index,
    value: value,
    tokenTime: tokenTime,
    flags: flags
  };
  var args = new TokenApi_issueSetControlToken_args(params);
  try {
    output.writeMessageBegin('issueSetControlToken', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

TokenApiClient.prototype.recv_issueSetControlToken = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TokenApi_issueSetControlToken_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('issueSetControlToken failed: unknown result');
};

TokenApiClient.prototype.issueKeyChangeTokens = function(messageId, accessToken, meterConfig, newConfig, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_issueKeyChangeTokens(messageId, accessToken, meterConfig, newConfig);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_issueKeyChangeTokens(messageId, accessToken, meterConfig, newConfig);
  }
};

TokenApiClient.prototype.send_issueKeyChangeTokens = function(messageId, accessToken, meterConfig, newConfig) {
  var output = new this.pClass(this.output);
  var params = {
    messageId: messageId,
    accessToken: accessToken,
    meterConfig: meterConfig,
    newConfig: newConfig
  };
  var args = new TokenApi_issueKeyChangeTokens_args(params);
  try {
    output.writeMessageBegin('issueKeyChangeTokens', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

TokenApiClient.prototype.recv_issueKeyChangeTokens = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TokenApi_issueKeyChangeTokens_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('issueKeyChangeTokens failed: unknown result');
};

TokenApiClient.prototype.verifyToken = function(messageId, accessToken, meterConfig, tokenDec, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_verifyToken(messageId, accessToken, meterConfig, tokenDec);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_verifyToken(messageId, accessToken, meterConfig, tokenDec);
  }
};

TokenApiClient.prototype.send_verifyToken = function(messageId, accessToken, meterConfig, tokenDec) {
  var output = new this.pClass(this.output);
  var params = {
    messageId: messageId,
    accessToken: accessToken,
    meterConfig: meterConfig,
    tokenDec: tokenDec
  };
  var args = new TokenApi_verifyToken_args(params);
  try {
    output.writeMessageBegin('verifyToken', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

TokenApiClient.prototype.recv_verifyToken = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TokenApi_verifyToken_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('verifyToken failed: unknown result');
};

TokenApiClient.prototype.issueDitkChangeTokens = function(messageId, accessToken, meterConfig, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_issueDitkChangeTokens(messageId, accessToken, meterConfig);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_issueDitkChangeTokens(messageId, accessToken, meterConfig);
  }
};

TokenApiClient.prototype.send_issueDitkChangeTokens = function(messageId, accessToken, meterConfig) {
  var output = new this.pClass(this.output);
  var params = {
    messageId: messageId,
    accessToken: accessToken,
    meterConfig: meterConfig
  };
  var args = new TokenApi_issueDitkChangeTokens_args(params);
  try {
    output.writeMessageBegin('issueDitkChangeTokens', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

TokenApiClient.prototype.recv_issueDitkChangeTokens = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TokenApi_issueDitkChangeTokens_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('issueDitkChangeTokens failed: unknown result');
};

TokenApiClient.prototype.fetchTokenResult = function(messageId, accessToken, reqMessageId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_fetchTokenResult(messageId, accessToken, reqMessageId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_fetchTokenResult(messageId, accessToken, reqMessageId);
  }
};

TokenApiClient.prototype.send_fetchTokenResult = function(messageId, accessToken, reqMessageId) {
  var output = new this.pClass(this.output);
  var params = {
    messageId: messageId,
    accessToken: accessToken,
    reqMessageId: reqMessageId
  };
  var args = new TokenApi_fetchTokenResult_args(params);
  try {
    output.writeMessageBegin('fetchTokenResult', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

TokenApiClient.prototype.recv_fetchTokenResult = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TokenApi_fetchTokenResult_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('fetchTokenResult failed: unknown result');
};

TokenApiClient.prototype.ctsResetTidList = function(messageId, accessToken, panPattern, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_ctsResetTidList(messageId, accessToken, panPattern);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_ctsResetTidList(messageId, accessToken, panPattern);
  }
};

TokenApiClient.prototype.send_ctsResetTidList = function(messageId, accessToken, panPattern) {
  var output = new this.pClass(this.output);
  var params = {
    messageId: messageId,
    accessToken: accessToken,
    panPattern: panPattern
  };
  var args = new TokenApi_ctsResetTidList_args(params);
  try {
    output.writeMessageBegin('ctsResetTidList', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

TokenApiClient.prototype.recv_ctsResetTidList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TokenApi_ctsResetTidList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('ctsResetTidList failed: unknown result');
};
var TokenApiProcessor = exports.Processor = function(handler) {
  this._handler = handler;
};
TokenApiProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
TokenApiProcessor.prototype.process_ping = function(seqid, input, output) {
  var args = new TokenApi_ping_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.ping.length === 2) {
    Q.fcall(this._handler.ping.bind(this._handler),
      args.sleepMs,
      args.echo
    ).then(function(result) {
      var result_obj = new TokenApi_ping_result({success: result});
      output.writeMessageBegin("ping", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ApiException) {
        result = new TokenApi_ping_result(err);
        output.writeMessageBegin("ping", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("ping", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.ping(args.sleepMs, args.echo, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ApiException) {
        result_obj = new TokenApi_ping_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("ping", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("ping", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TokenApiProcessor.prototype.process_signInWithPassword = function(seqid, input, output) {
  var args = new TokenApi_signInWithPassword_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.signInWithPassword.length === 5) {
    Q.fcall(this._handler.signInWithPassword.bind(this._handler),
      args.messageId,
      args.realm,
      args.username,
      args.password,
      args.sessionOpts
    ).then(function(result) {
      var result_obj = new TokenApi_signInWithPassword_result({success: result});
      output.writeMessageBegin("signInWithPassword", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ApiException) {
        result = new TokenApi_signInWithPassword_result(err);
        output.writeMessageBegin("signInWithPassword", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("signInWithPassword", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.signInWithPassword(args.messageId, args.realm, args.username, args.password, args.sessionOpts, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ApiException) {
        result_obj = new TokenApi_signInWithPassword_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("signInWithPassword", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("signInWithPassword", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TokenApiProcessor.prototype.process_getStatus = function(seqid, input, output) {
  var args = new TokenApi_getStatus_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getStatus.length === 2) {
    Q.fcall(this._handler.getStatus.bind(this._handler),
      args.messageId,
      args.accessToken
    ).then(function(result) {
      var result_obj = new TokenApi_getStatus_result({success: result});
      output.writeMessageBegin("getStatus", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ApiException) {
        result = new TokenApi_getStatus_result(err);
        output.writeMessageBegin("getStatus", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getStatus", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getStatus(args.messageId, args.accessToken, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ApiException) {
        result_obj = new TokenApi_getStatus_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getStatus", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getStatus", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TokenApiProcessor.prototype.process_parseIdRecord = function(seqid, input, output) {
  var args = new TokenApi_parseIdRecord_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.parseIdRecord.length === 3) {
    Q.fcall(this._handler.parseIdRecord.bind(this._handler),
      args.messageId,
      args.accessToken,
      args.idRecord
    ).then(function(result) {
      var result_obj = new TokenApi_parseIdRecord_result({success: result});
      output.writeMessageBegin("parseIdRecord", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ApiException) {
        result = new TokenApi_parseIdRecord_result(err);
        output.writeMessageBegin("parseIdRecord", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("parseIdRecord", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.parseIdRecord(args.messageId, args.accessToken, args.idRecord, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ApiException) {
        result_obj = new TokenApi_parseIdRecord_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("parseIdRecord", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("parseIdRecord", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TokenApiProcessor.prototype.process_loadTransactionLicense = function(seqid, input, output) {
  var args = new TokenApi_loadTransactionLicense_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadTransactionLicense.length === 3) {
    Q.fcall(this._handler.loadTransactionLicense.bind(this._handler),
      args.messageId,
      args.accessToken,
      args.licenseText
    ).then(function(result) {
      var result_obj = new TokenApi_loadTransactionLicense_result({success: result});
      output.writeMessageBegin("loadTransactionLicense", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ApiException) {
        result = new TokenApi_loadTransactionLicense_result(err);
        output.writeMessageBegin("loadTransactionLicense", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadTransactionLicense", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.loadTransactionLicense(args.messageId, args.accessToken, args.licenseText, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ApiException) {
        result_obj = new TokenApi_loadTransactionLicense_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadTransactionLicense", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadTransactionLicense", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TokenApiProcessor.prototype.process_issueCreditToken = function(seqid, input, output) {
  var args = new TokenApi_issueCreditToken_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.issueCreditToken.length === 7) {
    Q.fcall(this._handler.issueCreditToken.bind(this._handler),
      args.messageId,
      args.accessToken,
      args.meterConfig,
      args.subclass,
      args.transferAmount,
      args.tokenTime,
      args.flags
    ).then(function(result) {
      var result_obj = new TokenApi_issueCreditToken_result({success: result});
      output.writeMessageBegin("issueCreditToken", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ApiException) {
        result = new TokenApi_issueCreditToken_result(err);
        output.writeMessageBegin("issueCreditToken", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("issueCreditToken", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.issueCreditToken(args.messageId, args.accessToken, args.meterConfig, args.subclass, args.transferAmount, args.tokenTime, args.flags, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ApiException) {
        result_obj = new TokenApi_issueCreditToken_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("issueCreditToken", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("issueCreditToken", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TokenApiProcessor.prototype.process_issueMeterTestToken = function(seqid, input, output) {
  var args = new TokenApi_issueMeterTestToken_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.issueMeterTestToken.length === 5) {
    Q.fcall(this._handler.issueMeterTestToken.bind(this._handler),
      args.messageId,
      args.accessToken,
      args.subclass,
      args.control,
      args.mfrcode
    ).then(function(result) {
      var result_obj = new TokenApi_issueMeterTestToken_result({success: result});
      output.writeMessageBegin("issueMeterTestToken", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ApiException) {
        result = new TokenApi_issueMeterTestToken_result(err);
        output.writeMessageBegin("issueMeterTestToken", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("issueMeterTestToken", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.issueMeterTestToken(args.messageId, args.accessToken, args.subclass, args.control, args.mfrcode, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ApiException) {
        result_obj = new TokenApi_issueMeterTestToken_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("issueMeterTestToken", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("issueMeterTestToken", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TokenApiProcessor.prototype.process_issueMseToken = function(seqid, input, output) {
  var args = new TokenApi_issueMseToken_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.issueMseToken.length === 7) {
    Q.fcall(this._handler.issueMseToken.bind(this._handler),
      args.messageId,
      args.accessToken,
      args.meterConfig,
      args.subclass,
      args.transferAmount,
      args.tokenTime,
      args.flags
    ).then(function(result) {
      var result_obj = new TokenApi_issueMseToken_result({success: result});
      output.writeMessageBegin("issueMseToken", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ApiException) {
        result = new TokenApi_issueMseToken_result(err);
        output.writeMessageBegin("issueMseToken", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("issueMseToken", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.issueMseToken(args.messageId, args.accessToken, args.meterConfig, args.subclass, args.transferAmount, args.tokenTime, args.flags, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ApiException) {
        result_obj = new TokenApi_issueMseToken_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("issueMseToken", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("issueMseToken", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TokenApiProcessor.prototype.process_issueSetControlToken = function(seqid, input, output) {
  var args = new TokenApi_issueSetControlToken_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.issueSetControlToken.length === 8) {
    Q.fcall(this._handler.issueSetControlToken.bind(this._handler),
      args.messageId,
      args.accessToken,
      args.meterConfig,
      args.isFlag,
      args.index,
      args.value,
      args.tokenTime,
      args.flags
    ).then(function(result) {
      var result_obj = new TokenApi_issueSetControlToken_result({success: result});
      output.writeMessageBegin("issueSetControlToken", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ApiException) {
        result = new TokenApi_issueSetControlToken_result(err);
        output.writeMessageBegin("issueSetControlToken", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("issueSetControlToken", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.issueSetControlToken(args.messageId, args.accessToken, args.meterConfig, args.isFlag, args.index, args.value, args.tokenTime, args.flags, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ApiException) {
        result_obj = new TokenApi_issueSetControlToken_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("issueSetControlToken", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("issueSetControlToken", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TokenApiProcessor.prototype.process_issueKeyChangeTokens = function(seqid, input, output) {
  var args = new TokenApi_issueKeyChangeTokens_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.issueKeyChangeTokens.length === 4) {
    Q.fcall(this._handler.issueKeyChangeTokens.bind(this._handler),
      args.messageId,
      args.accessToken,
      args.meterConfig,
      args.newConfig
    ).then(function(result) {
      var result_obj = new TokenApi_issueKeyChangeTokens_result({success: result});
      output.writeMessageBegin("issueKeyChangeTokens", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ApiException) {
        result = new TokenApi_issueKeyChangeTokens_result(err);
        output.writeMessageBegin("issueKeyChangeTokens", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("issueKeyChangeTokens", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.issueKeyChangeTokens(args.messageId, args.accessToken, args.meterConfig, args.newConfig, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ApiException) {
        result_obj = new TokenApi_issueKeyChangeTokens_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("issueKeyChangeTokens", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("issueKeyChangeTokens", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TokenApiProcessor.prototype.process_verifyToken = function(seqid, input, output) {
  var args = new TokenApi_verifyToken_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.verifyToken.length === 4) {
    Q.fcall(this._handler.verifyToken.bind(this._handler),
      args.messageId,
      args.accessToken,
      args.meterConfig,
      args.tokenDec
    ).then(function(result) {
      var result_obj = new TokenApi_verifyToken_result({success: result});
      output.writeMessageBegin("verifyToken", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ApiException) {
        result = new TokenApi_verifyToken_result(err);
        output.writeMessageBegin("verifyToken", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("verifyToken", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.verifyToken(args.messageId, args.accessToken, args.meterConfig, args.tokenDec, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ApiException) {
        result_obj = new TokenApi_verifyToken_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("verifyToken", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("verifyToken", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TokenApiProcessor.prototype.process_issueDitkChangeTokens = function(seqid, input, output) {
  var args = new TokenApi_issueDitkChangeTokens_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.issueDitkChangeTokens.length === 3) {
    Q.fcall(this._handler.issueDitkChangeTokens.bind(this._handler),
      args.messageId,
      args.accessToken,
      args.meterConfig
    ).then(function(result) {
      var result_obj = new TokenApi_issueDitkChangeTokens_result({success: result});
      output.writeMessageBegin("issueDitkChangeTokens", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ApiException) {
        result = new TokenApi_issueDitkChangeTokens_result(err);
        output.writeMessageBegin("issueDitkChangeTokens", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("issueDitkChangeTokens", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.issueDitkChangeTokens(args.messageId, args.accessToken, args.meterConfig, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ApiException) {
        result_obj = new TokenApi_issueDitkChangeTokens_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("issueDitkChangeTokens", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("issueDitkChangeTokens", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TokenApiProcessor.prototype.process_fetchTokenResult = function(seqid, input, output) {
  var args = new TokenApi_fetchTokenResult_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.fetchTokenResult.length === 3) {
    Q.fcall(this._handler.fetchTokenResult.bind(this._handler),
      args.messageId,
      args.accessToken,
      args.reqMessageId
    ).then(function(result) {
      var result_obj = new TokenApi_fetchTokenResult_result({success: result});
      output.writeMessageBegin("fetchTokenResult", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ApiException) {
        result = new TokenApi_fetchTokenResult_result(err);
        output.writeMessageBegin("fetchTokenResult", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("fetchTokenResult", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.fetchTokenResult(args.messageId, args.accessToken, args.reqMessageId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ApiException) {
        result_obj = new TokenApi_fetchTokenResult_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("fetchTokenResult", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("fetchTokenResult", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TokenApiProcessor.prototype.process_ctsResetTidList = function(seqid, input, output) {
  var args = new TokenApi_ctsResetTidList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.ctsResetTidList.length === 3) {
    Q.fcall(this._handler.ctsResetTidList.bind(this._handler),
      args.messageId,
      args.accessToken,
      args.panPattern
    ).then(function(result) {
      var result_obj = new TokenApi_ctsResetTidList_result({success: result});
      output.writeMessageBegin("ctsResetTidList", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ApiException) {
        result = new TokenApi_ctsResetTidList_result(err);
        output.writeMessageBegin("ctsResetTidList", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("ctsResetTidList", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.ctsResetTidList(args.messageId, args.accessToken, args.panPattern, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ApiException) {
        result_obj = new TokenApi_ctsResetTidList_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("ctsResetTidList", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("ctsResetTidList", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
