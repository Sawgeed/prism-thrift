//
// Autogenerated by Thrift Compiler (0.19.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');


var ttypes = module.exports = {};
ttypes.TokenIssueFlags = {
  'EXTERNAL_CLOCK' : 1,
  'TID_ADJUST_BDT' : 2,
  'SPECIAL_RESERVED' : 4
};
var ApiException = module.exports.ApiException = function(args) {
  Thrift.TException.call(this, "ApiException");
  this.name = "ApiException";
  this.eCode = null;
  this.eMsgEn = null;
  if (args) {
    if (args.eCode !== undefined && args.eCode !== null) {
      this.eCode = args.eCode;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field eCode is unset!');
    }
    if (args.eMsgEn !== undefined && args.eMsgEn !== null) {
      this.eMsgEn = args.eMsgEn;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field eMsgEn is unset!');
    }
  }
};
Thrift.inherits(ApiException, Thrift.TException);
ApiException.prototype.name = 'ApiException';
ApiException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.eCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.eMsgEn = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ApiException.prototype.write = function(output) {
  output.writeStructBegin('ApiException');
  if (this.eCode !== null && this.eCode !== undefined) {
    output.writeFieldBegin('eCode', Thrift.Type.STRING, 1);
    output.writeString(this.eCode);
    output.writeFieldEnd();
  }
  if (this.eMsgEn !== null && this.eMsgEn !== undefined) {
    output.writeFieldBegin('eMsgEn', Thrift.Type.STRING, 2);
    output.writeString(this.eMsgEn);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SessionOptions = module.exports.SessionOptions = function(args) {
  this.version = '1.1';
  this.culture = 'en';
  if (args) {
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field version is unset!');
    }
    if (args.culture !== undefined && args.culture !== null) {
      this.culture = args.culture;
    }
  }
};
SessionOptions.prototype = {};
SessionOptions.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.version = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.culture = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SessionOptions.prototype.write = function(output) {
  output.writeStructBegin('SessionOptions');
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRING, 1);
    output.writeString(this.version);
    output.writeFieldEnd();
  }
  if (this.culture !== null && this.culture !== undefined) {
    output.writeFieldBegin('culture', Thrift.Type.STRING, 10);
    output.writeString(this.culture);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SignInResult = module.exports.SignInResult = function(args) {
  this.accessToken = null;
  if (args) {
    if (args.accessToken !== undefined && args.accessToken !== null) {
      this.accessToken = args.accessToken;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field accessToken is unset!');
    }
  }
};
SignInResult.prototype = {};
SignInResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.accessToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SignInResult.prototype.write = function(output) {
  output.writeStructBegin('SignInResult');
  if (this.accessToken !== null && this.accessToken !== undefined) {
    output.writeFieldBegin('accessToken', Thrift.Type.STRING, 1);
    output.writeString(this.accessToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Alert = module.exports.Alert = function(args) {
  this.eCode = null;
  this.eMsgEn = null;
  if (args) {
    if (args.eCode !== undefined && args.eCode !== null) {
      this.eCode = args.eCode;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field eCode is unset!');
    }
    if (args.eMsgEn !== undefined && args.eMsgEn !== null) {
      this.eMsgEn = args.eMsgEn;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field eMsgEn is unset!');
    }
  }
};
Alert.prototype = {};
Alert.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.eCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.eMsgEn = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Alert.prototype.write = function(output) {
  output.writeStructBegin('Alert');
  if (this.eCode !== null && this.eCode !== undefined) {
    output.writeFieldBegin('eCode', Thrift.Type.STRING, 1);
    output.writeString(this.eCode);
    output.writeFieldEnd();
  }
  if (this.eMsgEn !== null && this.eMsgEn !== undefined) {
    output.writeFieldBegin('eMsgEn', Thrift.Type.STRING, 2);
    output.writeString(this.eMsgEn);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NodeStatus = module.exports.NodeStatus = function(args) {
  this.info = null;
  this.alerts = null;
  if (args) {
    if (args.info !== undefined && args.info !== null) {
      this.info = Thrift.copyMap(args.info, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field info is unset!');
    }
    if (args.alerts !== undefined && args.alerts !== null) {
      this.alerts = Thrift.copyList(args.alerts, [ttypes.Alert]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field alerts is unset!');
    }
  }
};
NodeStatus.prototype = {};
NodeStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        this.info = {};
        var _rtmp31 = input.readMapBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var key3 = null;
          var val4 = null;
          key3 = input.readString();
          val4 = input.readString();
          this.info[key3] = val4;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.alerts = [];
        var _rtmp36 = input.readListBegin();
        var _size5 = _rtmp36.size || 0;
        for (var _i7 = 0; _i7 < _size5; ++_i7) {
          var elem8 = null;
          elem8 = new ttypes.Alert();
          elem8.read(input);
          this.alerts.push(elem8);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NodeStatus.prototype.write = function(output) {
  output.writeStructBegin('NodeStatus');
  if (this.info !== null && this.info !== undefined) {
    output.writeFieldBegin('info', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.info));
    for (var kiter9 in this.info) {
      if (this.info.hasOwnProperty(kiter9)) {
        var viter10 = this.info[kiter9];
        output.writeString(kiter9);
        output.writeString(viter10);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.alerts !== null && this.alerts !== undefined) {
    output.writeFieldBegin('alerts', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.alerts.length);
    for (var iter11 in this.alerts) {
      if (this.alerts.hasOwnProperty(iter11)) {
        iter11 = this.alerts[iter11];
        iter11.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MeterConfigAmendment = module.exports.MeterConfigAmendment = function(args) {
  this.toSgc = null;
  this.toKrn = null;
  this.toTi = null;
  if (args) {
    if (args.toSgc !== undefined && args.toSgc !== null) {
      this.toSgc = args.toSgc;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field toSgc is unset!');
    }
    if (args.toKrn !== undefined && args.toKrn !== null) {
      this.toKrn = args.toKrn;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field toKrn is unset!');
    }
    if (args.toTi !== undefined && args.toTi !== null) {
      this.toTi = args.toTi;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field toTi is unset!');
    }
  }
};
MeterConfigAmendment.prototype = {};
MeterConfigAmendment.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.toSgc = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I16) {
        this.toKrn = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.toTi = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MeterConfigAmendment.prototype.write = function(output) {
  output.writeStructBegin('MeterConfigAmendment');
  if (this.toSgc !== null && this.toSgc !== undefined) {
    output.writeFieldBegin('toSgc', Thrift.Type.I32, 1);
    output.writeI32(this.toSgc);
    output.writeFieldEnd();
  }
  if (this.toKrn !== null && this.toKrn !== undefined) {
    output.writeFieldBegin('toKrn', Thrift.Type.I16, 2);
    output.writeI16(this.toKrn);
    output.writeFieldEnd();
  }
  if (this.toTi !== null && this.toTi !== undefined) {
    output.writeFieldBegin('toTi', Thrift.Type.I16, 3);
    output.writeI16(this.toTi);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MeterConfigIn = module.exports.MeterConfigIn = function(args) {
  this.drn = null;
  this.ea = null;
  this.tct = null;
  this.sgc = null;
  this.krn = null;
  this.ti = null;
  this.newConfig = null;
  this.allowKrnUpdate = true;
  this.ken = null;
  this.doe = '0000';
  this.allow3Kct = false;
  this.allowKenUpdate = true;
  if (args) {
    if (args.drn !== undefined && args.drn !== null) {
      this.drn = args.drn;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field drn is unset!');
    }
    if (args.ea !== undefined && args.ea !== null) {
      this.ea = args.ea;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ea is unset!');
    }
    if (args.tct !== undefined && args.tct !== null) {
      this.tct = args.tct;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tct is unset!');
    }
    if (args.sgc !== undefined && args.sgc !== null) {
      this.sgc = args.sgc;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sgc is unset!');
    }
    if (args.krn !== undefined && args.krn !== null) {
      this.krn = args.krn;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field krn is unset!');
    }
    if (args.ti !== undefined && args.ti !== null) {
      this.ti = args.ti;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ti is unset!');
    }
    if (args.newConfig !== undefined && args.newConfig !== null) {
      this.newConfig = new ttypes.MeterConfigAmendment(args.newConfig);
    }
    if (args.allowKrnUpdate !== undefined && args.allowKrnUpdate !== null) {
      this.allowKrnUpdate = args.allowKrnUpdate;
    }
    if (args.ken !== undefined && args.ken !== null) {
      this.ken = args.ken;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ken is unset!');
    }
    if (args.doe !== undefined && args.doe !== null) {
      this.doe = args.doe;
    }
    if (args.allow3Kct !== undefined && args.allow3Kct !== null) {
      this.allow3Kct = args.allow3Kct;
    }
    if (args.allowKenUpdate !== undefined && args.allowKenUpdate !== null) {
      this.allowKenUpdate = args.allowKenUpdate;
    }
  }
};
MeterConfigIn.prototype = {};
MeterConfigIn.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.drn = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I16) {
        this.ea = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.tct = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.sgc = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I16) {
        this.krn = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I16) {
        this.ti = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRUCT) {
        this.newConfig = new ttypes.MeterConfigAmendment();
        this.newConfig.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.BOOL) {
        this.allowKrnUpdate = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.I16) {
        this.ken = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.STRING) {
        this.doe = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 32:
      if (ftype == Thrift.Type.BOOL) {
        this.allow3Kct = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 33:
      if (ftype == Thrift.Type.BOOL) {
        this.allowKenUpdate = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MeterConfigIn.prototype.write = function(output) {
  output.writeStructBegin('MeterConfigIn');
  if (this.drn !== null && this.drn !== undefined) {
    output.writeFieldBegin('drn', Thrift.Type.STRING, 1);
    output.writeString(this.drn);
    output.writeFieldEnd();
  }
  if (this.ea !== null && this.ea !== undefined) {
    output.writeFieldBegin('ea', Thrift.Type.I16, 2);
    output.writeI16(this.ea);
    output.writeFieldEnd();
  }
  if (this.tct !== null && this.tct !== undefined) {
    output.writeFieldBegin('tct', Thrift.Type.I16, 3);
    output.writeI16(this.tct);
    output.writeFieldEnd();
  }
  if (this.sgc !== null && this.sgc !== undefined) {
    output.writeFieldBegin('sgc', Thrift.Type.I32, 10);
    output.writeI32(this.sgc);
    output.writeFieldEnd();
  }
  if (this.krn !== null && this.krn !== undefined) {
    output.writeFieldBegin('krn', Thrift.Type.I16, 11);
    output.writeI16(this.krn);
    output.writeFieldEnd();
  }
  if (this.ti !== null && this.ti !== undefined) {
    output.writeFieldBegin('ti', Thrift.Type.I16, 12);
    output.writeI16(this.ti);
    output.writeFieldEnd();
  }
  if (this.newConfig !== null && this.newConfig !== undefined) {
    output.writeFieldBegin('newConfig', Thrift.Type.STRUCT, 20);
    this.newConfig.write(output);
    output.writeFieldEnd();
  }
  if (this.allowKrnUpdate !== null && this.allowKrnUpdate !== undefined) {
    output.writeFieldBegin('allowKrnUpdate', Thrift.Type.BOOL, 21);
    output.writeBool(this.allowKrnUpdate);
    output.writeFieldEnd();
  }
  if (this.ken !== null && this.ken !== undefined) {
    output.writeFieldBegin('ken', Thrift.Type.I16, 30);
    output.writeI16(this.ken);
    output.writeFieldEnd();
  }
  if (this.doe !== null && this.doe !== undefined) {
    output.writeFieldBegin('doe', Thrift.Type.STRING, 31);
    output.writeString(this.doe);
    output.writeFieldEnd();
  }
  if (this.allow3Kct !== null && this.allow3Kct !== undefined) {
    output.writeFieldBegin('allow3Kct', Thrift.Type.BOOL, 32);
    output.writeBool(this.allow3Kct);
    output.writeFieldEnd();
  }
  if (this.allowKenUpdate !== null && this.allowKenUpdate !== undefined) {
    output.writeFieldBegin('allowKenUpdate', Thrift.Type.BOOL, 33);
    output.writeBool(this.allowKenUpdate);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MeterConfigAdvice = module.exports.MeterConfigAdvice = function(args) {
  this.toSgc = null;
  this.toKrn = null;
  this.toTi = null;
  this.toKen = null;
  this.idRecord = null;
  this.record2 = null;
  this.rollover = null;
  this.toVkKcv = null;
  if (args) {
    if (args.toSgc !== undefined && args.toSgc !== null) {
      this.toSgc = args.toSgc;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field toSgc is unset!');
    }
    if (args.toKrn !== undefined && args.toKrn !== null) {
      this.toKrn = args.toKrn;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field toKrn is unset!');
    }
    if (args.toTi !== undefined && args.toTi !== null) {
      this.toTi = args.toTi;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field toTi is unset!');
    }
    if (args.toKen !== undefined && args.toKen !== null) {
      this.toKen = args.toKen;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field toKen is unset!');
    }
    if (args.idRecord !== undefined && args.idRecord !== null) {
      this.idRecord = args.idRecord;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field idRecord is unset!');
    }
    if (args.record2 !== undefined && args.record2 !== null) {
      this.record2 = args.record2;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field record2 is unset!');
    }
    if (args.rollover !== undefined && args.rollover !== null) {
      this.rollover = args.rollover;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field rollover is unset!');
    }
    if (args.toVkKcv !== undefined && args.toVkKcv !== null) {
      this.toVkKcv = args.toVkKcv;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field toVkKcv is unset!');
    }
  }
};
MeterConfigAdvice.prototype = {};
MeterConfigAdvice.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.toSgc = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I16) {
        this.toKrn = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.toTi = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I16) {
        this.toKen = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.idRecord = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.record2 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.BOOL) {
        this.rollover = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.toVkKcv = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MeterConfigAdvice.prototype.write = function(output) {
  output.writeStructBegin('MeterConfigAdvice');
  if (this.toSgc !== null && this.toSgc !== undefined) {
    output.writeFieldBegin('toSgc', Thrift.Type.I32, 1);
    output.writeI32(this.toSgc);
    output.writeFieldEnd();
  }
  if (this.toKrn !== null && this.toKrn !== undefined) {
    output.writeFieldBegin('toKrn', Thrift.Type.I16, 2);
    output.writeI16(this.toKrn);
    output.writeFieldEnd();
  }
  if (this.toTi !== null && this.toTi !== undefined) {
    output.writeFieldBegin('toTi', Thrift.Type.I16, 3);
    output.writeI16(this.toTi);
    output.writeFieldEnd();
  }
  if (this.toKen !== null && this.toKen !== undefined) {
    output.writeFieldBegin('toKen', Thrift.Type.I16, 4);
    output.writeI16(this.toKen);
    output.writeFieldEnd();
  }
  if (this.idRecord !== null && this.idRecord !== undefined) {
    output.writeFieldBegin('idRecord', Thrift.Type.STRING, 10);
    output.writeString(this.idRecord);
    output.writeFieldEnd();
  }
  if (this.record2 !== null && this.record2 !== undefined) {
    output.writeFieldBegin('record2', Thrift.Type.STRING, 11);
    output.writeString(this.record2);
    output.writeFieldEnd();
  }
  if (this.rollover !== null && this.rollover !== undefined) {
    output.writeFieldBegin('rollover', Thrift.Type.BOOL, 20);
    output.writeBool(this.rollover);
    output.writeFieldEnd();
  }
  if (this.toVkKcv !== null && this.toVkKcv !== undefined) {
    output.writeFieldBegin('toVkKcv', Thrift.Type.STRING, 21);
    output.writeString(this.toVkKcv);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Token = module.exports.Token = function(args) {
  this.drn = null;
  this.pan = null;
  this.ea = null;
  this.tct = null;
  this.sgc = null;
  this.krn = null;
  this.ti = null;
  this.tokenClass = null;
  this.subclass = null;
  this.tid = null;
  this.transferAmount = null;
  this.isReservedTid = null;
  this.newConfig = null;
  this.description = null;
  this.stsUnitName = null;
  this.scaledAmount = null;
  this.scaledUnitName = null;
  this.tokenDec = null;
  this.tokenHex = null;
  this.idSm = null;
  this.vkKcv = null;
  if (args) {
    if (args.drn !== undefined && args.drn !== null) {
      this.drn = args.drn;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field drn is unset!');
    }
    if (args.pan !== undefined && args.pan !== null) {
      this.pan = args.pan;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field pan is unset!');
    }
    if (args.ea !== undefined && args.ea !== null) {
      this.ea = args.ea;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ea is unset!');
    }
    if (args.tct !== undefined && args.tct !== null) {
      this.tct = args.tct;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tct is unset!');
    }
    if (args.sgc !== undefined && args.sgc !== null) {
      this.sgc = args.sgc;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sgc is unset!');
    }
    if (args.krn !== undefined && args.krn !== null) {
      this.krn = args.krn;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field krn is unset!');
    }
    if (args.ti !== undefined && args.ti !== null) {
      this.ti = args.ti;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ti is unset!');
    }
    if (args.tokenClass !== undefined && args.tokenClass !== null) {
      this.tokenClass = args.tokenClass;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tokenClass is unset!');
    }
    if (args.subclass !== undefined && args.subclass !== null) {
      this.subclass = args.subclass;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field subclass is unset!');
    }
    if (args.tid !== undefined && args.tid !== null) {
      this.tid = args.tid;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tid is unset!');
    }
    if (args.transferAmount !== undefined && args.transferAmount !== null) {
      this.transferAmount = args.transferAmount;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field transferAmount is unset!');
    }
    if (args.isReservedTid !== undefined && args.isReservedTid !== null) {
      this.isReservedTid = args.isReservedTid;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field isReservedTid is unset!');
    }
    if (args.newConfig !== undefined && args.newConfig !== null) {
      this.newConfig = new ttypes.MeterConfigAdvice(args.newConfig);
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field description is unset!');
    }
    if (args.stsUnitName !== undefined && args.stsUnitName !== null) {
      this.stsUnitName = args.stsUnitName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field stsUnitName is unset!');
    }
    if (args.scaledAmount !== undefined && args.scaledAmount !== null) {
      this.scaledAmount = args.scaledAmount;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field scaledAmount is unset!');
    }
    if (args.scaledUnitName !== undefined && args.scaledUnitName !== null) {
      this.scaledUnitName = args.scaledUnitName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field scaledUnitName is unset!');
    }
    if (args.tokenDec !== undefined && args.tokenDec !== null) {
      this.tokenDec = args.tokenDec;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tokenDec is unset!');
    }
    if (args.tokenHex !== undefined && args.tokenHex !== null) {
      this.tokenHex = args.tokenHex;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tokenHex is unset!');
    }
    if (args.idSm !== undefined && args.idSm !== null) {
      this.idSm = args.idSm;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field idSm is unset!');
    }
    if (args.vkKcv !== undefined && args.vkKcv !== null) {
      this.vkKcv = args.vkKcv;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field vkKcv is unset!');
    }
  }
};
Token.prototype = {};
Token.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.drn = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.pan = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.ea = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I16) {
        this.tct = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.sgc = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I16) {
        this.krn = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I16) {
        this.ti = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I16) {
        this.tokenClass = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I16) {
        this.subclass = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.tid = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.DOUBLE) {
        this.transferAmount = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.BOOL) {
        this.isReservedTid = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRUCT) {
        this.newConfig = new ttypes.MeterConfigAdvice();
        this.newConfig.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.stsUnitName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRING) {
        this.scaledAmount = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.STRING) {
        this.scaledUnitName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.STRING) {
        this.tokenDec = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.STRING) {
        this.tokenHex = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 40:
      if (ftype == Thrift.Type.STRING) {
        this.idSm = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 41:
      if (ftype == Thrift.Type.STRING) {
        this.vkKcv = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Token.prototype.write = function(output) {
  output.writeStructBegin('Token');
  if (this.drn !== null && this.drn !== undefined) {
    output.writeFieldBegin('drn', Thrift.Type.STRING, 1);
    output.writeString(this.drn);
    output.writeFieldEnd();
  }
  if (this.pan !== null && this.pan !== undefined) {
    output.writeFieldBegin('pan', Thrift.Type.STRING, 2);
    output.writeString(this.pan);
    output.writeFieldEnd();
  }
  if (this.ea !== null && this.ea !== undefined) {
    output.writeFieldBegin('ea', Thrift.Type.I16, 3);
    output.writeI16(this.ea);
    output.writeFieldEnd();
  }
  if (this.tct !== null && this.tct !== undefined) {
    output.writeFieldBegin('tct', Thrift.Type.I16, 4);
    output.writeI16(this.tct);
    output.writeFieldEnd();
  }
  if (this.sgc !== null && this.sgc !== undefined) {
    output.writeFieldBegin('sgc', Thrift.Type.I32, 5);
    output.writeI32(this.sgc);
    output.writeFieldEnd();
  }
  if (this.krn !== null && this.krn !== undefined) {
    output.writeFieldBegin('krn', Thrift.Type.I16, 6);
    output.writeI16(this.krn);
    output.writeFieldEnd();
  }
  if (this.ti !== null && this.ti !== undefined) {
    output.writeFieldBegin('ti', Thrift.Type.I16, 7);
    output.writeI16(this.ti);
    output.writeFieldEnd();
  }
  if (this.tokenClass !== null && this.tokenClass !== undefined) {
    output.writeFieldBegin('tokenClass', Thrift.Type.I16, 10);
    output.writeI16(this.tokenClass);
    output.writeFieldEnd();
  }
  if (this.subclass !== null && this.subclass !== undefined) {
    output.writeFieldBegin('subclass', Thrift.Type.I16, 11);
    output.writeI16(this.subclass);
    output.writeFieldEnd();
  }
  if (this.tid !== null && this.tid !== undefined) {
    output.writeFieldBegin('tid', Thrift.Type.I32, 12);
    output.writeI32(this.tid);
    output.writeFieldEnd();
  }
  if (this.transferAmount !== null && this.transferAmount !== undefined) {
    output.writeFieldBegin('transferAmount', Thrift.Type.DOUBLE, 13);
    output.writeDouble(this.transferAmount);
    output.writeFieldEnd();
  }
  if (this.isReservedTid !== null && this.isReservedTid !== undefined) {
    output.writeFieldBegin('isReservedTid', Thrift.Type.BOOL, 14);
    output.writeBool(this.isReservedTid);
    output.writeFieldEnd();
  }
  if (this.newConfig !== null && this.newConfig !== undefined) {
    output.writeFieldBegin('newConfig', Thrift.Type.STRUCT, 15);
    this.newConfig.write(output);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 20);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.stsUnitName !== null && this.stsUnitName !== undefined) {
    output.writeFieldBegin('stsUnitName', Thrift.Type.STRING, 21);
    output.writeString(this.stsUnitName);
    output.writeFieldEnd();
  }
  if (this.scaledAmount !== null && this.scaledAmount !== undefined) {
    output.writeFieldBegin('scaledAmount', Thrift.Type.STRING, 22);
    output.writeString(this.scaledAmount);
    output.writeFieldEnd();
  }
  if (this.scaledUnitName !== null && this.scaledUnitName !== undefined) {
    output.writeFieldBegin('scaledUnitName', Thrift.Type.STRING, 23);
    output.writeString(this.scaledUnitName);
    output.writeFieldEnd();
  }
  if (this.tokenDec !== null && this.tokenDec !== undefined) {
    output.writeFieldBegin('tokenDec', Thrift.Type.STRING, 30);
    output.writeString(this.tokenDec);
    output.writeFieldEnd();
  }
  if (this.tokenHex !== null && this.tokenHex !== undefined) {
    output.writeFieldBegin('tokenHex', Thrift.Type.STRING, 31);
    output.writeString(this.tokenHex);
    output.writeFieldEnd();
  }
  if (this.idSm !== null && this.idSm !== undefined) {
    output.writeFieldBegin('idSm', Thrift.Type.STRING, 40);
    output.writeString(this.idSm);
    output.writeFieldEnd();
  }
  if (this.vkKcv !== null && this.vkKcv !== undefined) {
    output.writeFieldBegin('vkKcv', Thrift.Type.STRING, 41);
    output.writeString(this.vkKcv);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MeterTestToken = module.exports.MeterTestToken = function(args) {
  this.drn = null;
  this.pan = null;
  this.tokenClass = null;
  this.subclass = null;
  this.control = null;
  this.mfrcode = null;
  this.description = null;
  this.tokenDec = null;
  this.tokenHex = null;
  if (args) {
    if (args.drn !== undefined && args.drn !== null) {
      this.drn = args.drn;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field drn is unset!');
    }
    if (args.pan !== undefined && args.pan !== null) {
      this.pan = args.pan;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field pan is unset!');
    }
    if (args.tokenClass !== undefined && args.tokenClass !== null) {
      this.tokenClass = args.tokenClass;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tokenClass is unset!');
    }
    if (args.subclass !== undefined && args.subclass !== null) {
      this.subclass = args.subclass;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field subclass is unset!');
    }
    if (args.control !== undefined && args.control !== null) {
      this.control = args.control;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field control is unset!');
    }
    if (args.mfrcode !== undefined && args.mfrcode !== null) {
      this.mfrcode = args.mfrcode;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field mfrcode is unset!');
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field description is unset!');
    }
    if (args.tokenDec !== undefined && args.tokenDec !== null) {
      this.tokenDec = args.tokenDec;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tokenDec is unset!');
    }
    if (args.tokenHex !== undefined && args.tokenHex !== null) {
      this.tokenHex = args.tokenHex;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tokenHex is unset!');
    }
  }
};
MeterTestToken.prototype = {};
MeterTestToken.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.drn = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.pan = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I16) {
        this.tokenClass = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I16) {
        this.subclass = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I64) {
        this.control = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I16) {
        this.mfrcode = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.STRING) {
        this.tokenDec = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.STRING) {
        this.tokenHex = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MeterTestToken.prototype.write = function(output) {
  output.writeStructBegin('MeterTestToken');
  if (this.drn !== null && this.drn !== undefined) {
    output.writeFieldBegin('drn', Thrift.Type.STRING, 1);
    output.writeString(this.drn);
    output.writeFieldEnd();
  }
  if (this.pan !== null && this.pan !== undefined) {
    output.writeFieldBegin('pan', Thrift.Type.STRING, 2);
    output.writeString(this.pan);
    output.writeFieldEnd();
  }
  if (this.tokenClass !== null && this.tokenClass !== undefined) {
    output.writeFieldBegin('tokenClass', Thrift.Type.I16, 10);
    output.writeI16(this.tokenClass);
    output.writeFieldEnd();
  }
  if (this.subclass !== null && this.subclass !== undefined) {
    output.writeFieldBegin('subclass', Thrift.Type.I16, 11);
    output.writeI16(this.subclass);
    output.writeFieldEnd();
  }
  if (this.control !== null && this.control !== undefined) {
    output.writeFieldBegin('control', Thrift.Type.I64, 12);
    output.writeI64(this.control);
    output.writeFieldEnd();
  }
  if (this.mfrcode !== null && this.mfrcode !== undefined) {
    output.writeFieldBegin('mfrcode', Thrift.Type.I16, 13);
    output.writeI16(this.mfrcode);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 20);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.tokenDec !== null && this.tokenDec !== undefined) {
    output.writeFieldBegin('tokenDec', Thrift.Type.STRING, 30);
    output.writeString(this.tokenDec);
    output.writeFieldEnd();
  }
  if (this.tokenHex !== null && this.tokenHex !== undefined) {
    output.writeFieldBegin('tokenHex', Thrift.Type.STRING, 31);
    output.writeString(this.tokenHex);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VerifyResult = module.exports.VerifyResult = function(args) {
  this.validationResult = null;
  this.token = null;
  this.meterTestToken = null;
  if (args) {
    if (args.validationResult !== undefined && args.validationResult !== null) {
      this.validationResult = args.validationResult;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field validationResult is unset!');
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new ttypes.Token(args.token);
    }
    if (args.meterTestToken !== undefined && args.meterTestToken !== null) {
      this.meterTestToken = new ttypes.MeterTestToken(args.meterTestToken);
    }
  }
};
VerifyResult.prototype = {};
VerifyResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.validationResult = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.meterTestToken = new ttypes.MeterTestToken();
        this.meterTestToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VerifyResult.prototype.write = function(output) {
  output.writeStructBegin('VerifyResult');
  if (this.validationResult !== null && this.validationResult !== undefined) {
    output.writeFieldBegin('validationResult', Thrift.Type.STRING, 1);
    output.writeString(this.validationResult);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  if (this.meterTestToken !== null && this.meterTestToken !== undefined) {
    output.writeFieldBegin('meterTestToken', Thrift.Type.STRUCT, 3);
    this.meterTestToken.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ttypes.ApiVersion = '1.1';
ttypes.PrintableAsciiRe = '^[\\x20-\\x7e]*$';
ttypes.IdentMatchRe = '^[a-zA-Z0-9][a-zA-Z0-9_\\-\\.,]{0,39}$';
ttypes.ApiErrors = {
  'EAuthentication.Permission' : 'Access denied: accessToken does not have permission \'{0}\'',
  'EAuthentication.Token' : 'Authentication failed (bad accessToken: {0})',
  'ECacheMiss' : 'The requested entry was not found in the cache',
  'EKeystore.NotFound' : 'Vending Key not available for SGC={0},KRN={1} (reason: {2})',
  'EParamRange' : 'Parameter \'{0}\' out of range: got \'{1}\', expected {2}',
  'EPrefRange' : 'Preference \'{0}\' out of range: got \'{1}\', expected {2}',
  'EService' : 'Unhandled exception \'{0}\': {1}',
  'EService.Disabled' : 'Feature disabled: {0}',
  'ESignin.Authentication' : 'Sign-in failed: authentication failed for realm=\'{0}\' username=\'{1}\'',
  'ESignin.Permission' : 'Sign-in failed: realm=\'{0}\' username=\'{1}\' does not have permission \'{2}\'',
  'ESignin.Realm' : 'Sign-in failed: unknown realm=\'{0}\'',
  'ESignin.Subject' : 'Sign-in failed: unknown username=\'{1}\' in realm=\'{0}\'',
  'ESignin.Version' : 'This service (API version={0}) does not support your client\'s API version=\'{1}\'',
  'ESm' : 'Security Module error \'{0}\': {1}',
  'ESts.DrnOrPan' : 'Parameter \'{0}\' is an invalid meter DRN/PAN (reason: {2}); got \'{1}\'',
  'ESts.DrnOrPan.CheckDigit' : 'Parameter \'{0}\' is a meter DRN/PAN with bad check digit(s); got \'{1}\'',
  'ESts.IdRecord' : 'Parameter \'{0}\' is an invalid IDRecord/Record2 (reason: {2}); got \'{1}\'',
  'ESts.IdRecord.Expired' : 'Meter identification has expired (YYMM=\'{0}\')',
  'ESts.VkBeforeBdt' : 'Attempt to use Vending Key before its Base Date',
  'ESts.VkExpired' : 'Vending Key has expired (TokenID exceeds KeyExpiryNumber)',
  'EVerify.Crc' : 'Invalid token: CRC error',
  'EVerify.DdtkCredit' : 'Invalid token: Class 0 token encrypted under a DDTK',
  'EVerify.KeyExpired' : 'Invalid token: TokenID out of range for Vending Key KeyExpiryNumber',
  'EVerify.Ok' : '(Not an error) Token is valid'
};
